#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Garbage Collection
#+BEGIN_SRC emacs-lisp
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold (* 500 1024 1024))
;; Reset it to the default after initialization
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+END_SRC
** Automatic tangling
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  ;; Continue only if init.org is the current file
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** MELPA
#+BEGIN_SRC emacs-lisp
(unless (eq system-type 'windows-nt)
  (setq tlc-checktrust t))

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)

  (add-to-list
   'package-archives
   '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))

#+END_SRC
** Install use-package
Make sure that use-package is installed and that ensure is always on so that use-package downloads every package that is not installed.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
* Misc options
** Startup with tramp
#+BEGIN_SRC emacs-lisp
;;(require 'tramp)
(setq tramp-default-method "ssh"
      tramp-backup-directory-alist backup-directory-alist
      tramp-ssh-controlmaster-options "ssh")
#+END_SRC
** Custom Keybinds
#+BEGIN_SRC emacs-lisp
;;Replace the default switch buffer key with the smarter ibuffer window
(global-set-key (kbd "C-x C-b") 'ibuffer)

(global-set-key (kbd "C-c w") 'whitespace-mode)

(global-set-key (kbd "C-c c") 'quick-calc)

(global-set-key (kbd "C-c a") 'org-agenda-list)
(global-set-key (kbd "C-c o") 'org-capture)

(global-set-key (kbd "C-c v") 'visual-line-mode)

(global-set-key (kbd "<f8>") 'compile)
#+END_SRC
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;; Delete all the trailing whitespaces every time the file is saved
(push 'delete-trailing-whitespace before-save-hook)
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar scroll bar and menubar
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))

(menu-bar-mode -1)

;; Always treat tabs as spaces
(setq-default indent-tabs-mode nil)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; 99% opacity when the window is active, 90% when it is in the background.
;;(set-frame-parameter (selected-frame) 'alpha '(99 . 90))
;;(add-to-list 'default-frame-alist '(alpha . (99 . 90)))
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

(global-auto-revert-mode 1)
#+END_SRC
*** Easily search for non ASCII Characters
#+BEGIN_SRC emacs-lisp
(setq search-default-mode #'char-fold-to-regexp)
(setq replace-char-fold t)
#+END_SRC
*** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
(unless (eq system-type 'windows-nt)
  (global-prettify-symbols-mode)
  (setq prettify-symbols-unprettify-at-point 'right-edge))
#+END_SRC
** Open eshell in current window
Credit goes to [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfugwkt][/u/howardabrams]] and [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfuuo5y][/u/AndersBakken]]
#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
"Opens up a new shell in the directory associated with the current buffer's file."
(interactive)
(let* ((parent (if (buffer-file-name)
                    (file-name-directory (buffer-file-name))
                default-directory))
        (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell)
    (rename-buffer (concat "Eshell: " name))
    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-c s") 'eshell-here)
#+END_SRC
** UTF-8 and Fonts
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :family "Consolas" :height 100)
(set-face-attribute 'default nil :family "DejaVu Sans Mono"))

;;The following lines force UTF-8 whenever possible
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
#+END_SRC
** Dos2Unix
#+BEGIN_SRC emacs-lisp
(defun dos2unix ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
    (goto-char (point-min))
    (while (search-forward "\r" nil t) (replace-match "")))
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
;;Enables copy/paste from the system clipboard.
(setq select-enable-primary t)
(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
#+END_SRC
** Auto saves
Move the auto-save and backup files into the temp file directory so that emacs doesn't flood the working folders with junk.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))
#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(setq initial-scratch-message nil)

(defun display-startup-echo-area-message()
  (message (emacs-init-time)))

#+END_SRC
*** Show agenda on load
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
(add-hook 'after-init-hook 'org-agenda-list)
#+END_SRC
** Dired
*** Dired quick copy/paste
When dired-dwim-target is enabled, dired tries to guess a default target directory. So if there are multiple dired panes open it will use that as the default.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
*** Misc
Show all files with human readable sizes
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

** Use rx for re builder
[[http://francismurillo.github.io/2017-03-30-Exploring-Emacs-rx-Macro/][rx reference]]
#+BEGIN_SRC emacs-lisp
(setq reb-re-syntax 'rx)
#+END_SRC
** Tail log files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
#+END_SRC
** Fix lag
[[https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746][Source]]
#+BEGIN_SRC
(setq auto-window-vscroll nil)
#+END_SRC
** Horizontal Scrolling
#+BEGIN_SRC emacs-lisp
(setq auto-hscroll-mode 'current-line)
#+END_SRC
** Disable custom settings
Moves the custom file into a temp file, effectively making it session local

[[https://jamiecollinson.com/blog/my-emacs-config/][Source]]

#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
* Custom Packages
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :ensure counsel
  :ensure swiper
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-c I" . counsel-imenu)
         ("\C-s" . swiper))
  :config
  (ivy-mode 1))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (setq evil-want-integration nil)
  :config

  (evil-mode 1)
  ;;Disable evil in these modes
  (evil-set-initial-state 'erc-mode 'emacs)
  (evil-set-initial-state 'message-mode 'emacs)
  (evil-set-initial-state 'compilation-mode 'emacs)
  (evil-set-initial-state 'eww-mode 'emacs))

(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+END_SRC

*** Evil-cleverparens
#+BEGIN_SRC emacs-lisp
(use-package evil-cleverparens
  :config
  (add-hook 'lisp-mode-hook 'evil-cleverparens-mode))
#+END_SRC
*** Org-evil
#+BEGIN_SRC emacs-lisp
(use-package org-evil
  :commands org-evil
  :config
  (progn
    (add-hook 'org-mode-hook 'org-evil)))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 10
  :diminish company-mode
  :bind (("TAB" . company-indent-or-complete-common))
  :init (global-company-mode t)
  :config
  ;; no delay no autocomplete
  (setq
   company-idle-delay 0
   company-minimum-prefix-length 2
   company-tooltip-limit 20))
#+END_SRC
** Flycheck
Redundant(?) in 26.1
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :disabled t
  :defer 1
  :hook (after-init . global-flycheck-mode))
#+END_SRC
** Pdf-tools
#+BEGIN_SRC emacs-lisp
(unless (eq system-type 'windows-nt)
  (use-package pdf-tools
    :mode ("\\.pdf$" . pdf-view-mode)
    :config
    (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
    (pdf-tools-install)
    (define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
    (define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)))
#+END_SRC
** mtg-deck-mode
#+BEGIN_SRC emacs-lisp
(use-package mtg-deck-mode
  :defer t
  :config
  (defun mtg-deck-count-cards ()
    "Count cards both in deck and sideboard."
    (interactive)
    (save-excursion
      (let (deck sideboard)
        (goto-char (point-min))
        (while (re-search-forward "^\\([[:digit:]]+\\)[[:space:]]+[[:word:]]+.*$" (point-max) t)
          (push (string-to-number (match-string-no-properties 1)) deck))
        (goto-char (point-min))
        (while (re-search-forward "^SB:[[:space:]]*\\([[:digit:]]+\\)[[:space:]]+[[:word:]]+.*$" (point-max) t)
          (push (string-to-number (match-string-no-properties 1)) sideboard))
        (message "Deck: %d, Sideboard: %d " (apply #'+ deck) (apply #'+ sideboard))))))
#+END_SRC
** E-reader
#+BEGIN_SRC emacs-lisp
(use-package nov
  :mode (("\\.epub" . nov-mode))
  :config
  (progn
    (add-to-list 'evil-emacs-state-modes 'nov-mode)))
#+END_SRC
** Mingus
#+BEGIN_SRC emacs-lisp
(use-package mingus
  :commands mingus-browse
  :commands mingus-add-podcast-and-play
  :init
  (progn
    (global-set-key (kbd "C-c m") 'mingus-browse)
    ;;Disable evil in mingus
    (add-hook 'mingus-browse-hook 'evil-emacs-state)
    (add-hook 'mingus-playlist-hooks 'evil-emacs-state)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit-status)
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure company-auctex
  :mode (("\\.tex$" . LaTeX-mode)
         ("\\.latex$" . LaTeX-mode))

  :config
  (setq TeX-PDF-mode t)
  (setq TeX-auto-save t)
  (add-hook 'latex-mode-hook 'turn-on-auto-fill)
  (add-hook 'latex-mode-hook 'visual-line-mode)
  (company-auctex-init))
#+END_SRC

#+RESULTS:

** Pass
#+BEGIN_SRC emacs-lisp
(use-package password-store
  :commands (password-store-copy))
#+END_SRC
** Spray
#+BEGIN_SRC emacs-lisp
(use-package spray
  :commands spray-mode)
#+END_SRC
** Writeroom
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
  :commands writeroom-mode)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands projectile-mode
  :config
  (progn
    (add-hook 'prog-mode-hook 'projectile-mode)))
#+END_SRC
** Atomic Chrome
Used with [[https://addons.mozilla.org/en-US/firefox/addon/ghosttext/][GhostText]]
#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :commands atomic-chrome-start-server
  :config
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("gitlab\\.com" . gfm-mode)
          ("reddit\\.com" . markdown-mode))))
#+END_SRC
** Currently disabled
*** Relative Line Numbers
Relative line numbers. Currently disabled, because having them seems a bit redundant with vim easymotions.
#+BEGIN_SRC emacs-lisp
;; Relative line package
(use-package nlinum-relative
  :commands nlinum-relative-mode
  :disabled t
  :init
  (progn
    (setq nlinum-relative-redisplay-delay 0)
    (setq nlinum-relative-current-symbol "")
    (setq nlinum-relative-offset 0)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode))
  :config
  (progn
    (nlinum-relative-setup-evil)))
#+END_SRC
*** notmuch
Currently using gnus for my email.
#+BEGIN_SRC emacs-lisp
(unless t
  (autoload 'notmuch "notmuch" "notmuch mail" t)
  (add-hook 'notmuch-hello-mode 'evil-emacs-state)
  (add-hook 'notmuch-message-mode 'evil-emacs-state)
  (add-hook 'notmuch-search-mode 'evil-emacs-state))
#+END_SRC
*** Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed
  :bind (("C-c e" . elfeed))
  :disabled t
  :config
  (progn
    ;; Disable evil in all the elfeed panes
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    (elfeed-set-max-connections 64)
    (elfeed-load-opml "~/Sync/Misc/subscriptions.opml")

    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))
    (define-key elfeed-search-mode-map (kbd "c") 'elfeed-mark-all-as-read)))
#+END_SRC
* Programming Modes
** Language Independent Settings
*** Indentation
**** Aggressive indent
Automatic indentation.
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :config
  (global-aggressive-indent-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'python-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'slime-repl-mode))
#+END_SRC
**** Auto fill
#+BEGIN_SRC emacs-lisp
(defun comment-auto-fill ()
  (setq-local comment-auto-fill-only-comments t)
  (auto-fill-mode 1))
(add-hook 'prog-mode-hook 'comment-auto-fill)
#+END_SRC
*** Parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp
(defun neosloth-prog-mode-hook ()
  "My custom prog mode hook"
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (flymake-mode)
  (electric-pair-mode))

(add-hook 'prog-mode-hook 'neosloth-prog-mode-hook)
#+END_SRC
** LSP
Dependend on [[https://github.com/palantir/python-language-server][pyls]], [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-language-server]] and [[https://github.com/Microsoft/vscode/tree/master/extensions/html-language-features/server][html-language-server]]
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :commands (eglot eglot-ensure)
  :init
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'js2-mode-hook 'eglot-ensure)
  (add-hook 'mhtml-mode 'eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '(mhtml-mode . ("html-languageserver" "--stdio")))
  (define-key eglot-mode-map (kbd "C-c h") 'eglot-help-at-point))
#+END_SRC
** C-Mode
*** Indentation
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)
#+END_SRC
** Python
I'm gonna try to use LSP instead
*** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :disabled t
  :init
  (with-eval-after-load 'python (elpy-enable))
  :config
  (progn
    (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))))
#+END_SRC
*** Company-Jedi
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :mode (("\\.py$" . python-mode))
  :disabled t
  :config
  (progn
    (add-hook 'python-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends) '(company-jedi))))))
#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode (("\\.js$" . js2-mode)))
#+END_SRC
** Web/HTML
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :commands emmet-mode
  :hook (web-mode html-mode sgml-mode mhtml-mode)
  :config
  (setq emmet-move-cursor-between-quotes t))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (progn
    (setq markdown-command "multimarkdown")
    (add-hook 'markdown-mode-hook 'visual-line-mode)))
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode (("\\.lua" . lua-mode)))
#+END_SRC
*** Company-lua
#+BEGIN_SRC emacs-lisp
(use-package company-lua
  :mode (("\\.lua" . lua-mode))
  :config
  (progn
    (add-hook 'lua-mode-hook (lambda()
                               (setq-local company-backends '(company-lua))))))
#+END_SRC
*** Flycheck-lua
#+BEGIN_SRC emacs-lisp
(use-package flymake-lua
  :mode (("\\.lua" . lua-mode)))
#+END_SRC
** Slime
#+BEGIN_SRC emacs-lisp
(use-package slime
  :commands slime
  :ensure slime-company
  :config
  (setq inferior-lisp-program "sbcl")
  (slime-setup '(slime-fancy slime-company)))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :diminish (org-indent-mode visual-line-mode flyspell-mode)
  :ensure org-bullets
  :config
  (progn
    (setq org-src-preserve-indentation nil
          org-confirm-babel-evaluate nil
          org-return-follows-link t
          org-startup-with-inline-images t
          ;; Automatically preview latex fragments, and store the image files in the temp directory
          ;; org-startup-with-latex-preview t
          org-latex-preview-ltxpng-directory (expand-file-name
                                              (concat temporary-file-directory "ltxpng/"))
          ;; org-latex-create-formula-image-program 'imagemagick
          ;; allows alphabetical lists
          org-list-allow-alphabetical t
          ;; requires superscripts to use groups ({})
          org-use-sub-superscripts nil
          org-notes-location "~/Sync/Notes/"
          org-todo-location (expand-file-name
                             (concat org-notes-location "agenda.org"))
          org-default-notes-file org-todo-location

          org-agenda-files (list org-todo-location))

    ;; org-src config
    (setq
     org-edit-src-content-indentation 0
     org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-src-window-setup 'current-window)

    ;; Make windmove work in org-mode:
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right)

    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline org-todo-location "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("c" "Clipboard" entry (file+headline org-todo-location "Links")
             "* %?\n %x")
            ("s" "Scheduled" entry (file+headline org-todo-location "Events")
             "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))

    ;; Org-publish config
    (setq org-html-validation-link nil)

    (unless (eq system-type 'windows-nt)
      (add-hook 'org-mode-hook 'flyspell-mode))

    (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook 'org-bullets-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'visual-line-mode))

  (require 'org-bullets)
  (require 'ox-md)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (java . t)
     (lisp . t)
     (js . t)
     (restclient . t))))
#+END_SRC
** Interleave
#+BEGIN_SRC emacs-lisp
(use-package interleave
  :after org)
#+END_SRC
** Ob-restclient
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :after org)
#+END_SRC
** Disabled
*** Org publish
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-publish-project-alist
          '(("org-blog"
             ;;The directory containing our blog posts
             :base-directory "~/Sync/Notes/blog/blog/"
             ;; The directory where the final result will be copied to
             :publishing-directory "~/Sync/Notes/blog/publish/"
             :publishing-function org-html-publish-to-html
             ;; Generate a list of all posts
             :auto-sitemap t
             :author "neosloth"
             :sitemap-filename "index.org"
             :sitemap-title "Neosloth's Blog"
             :sitemap-file-entry-format "\"%t\" by %a on %d."
             :sitemap-date-format "%B %dth, %Y"
             :sitemap-sort-files t
             :auto-preamble t
             :html-head "<link rel=\"stylesheet\"
                       href=\"./css/style.css\" type=\"text/css\"/>")
            ("org-static"
             :base-directory "~/Sync/Notes/blog/blog/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|ico"
             :publishing-directory "~/Sync/Notes/blog/publish/"
             :recursive t
             :publishing-function org-publish-attachment)
            ("org" :components ("org-blog" "org-static"))))
#+END_SRC
*** org-caldav
#+BEGIN_SRC emacs-lisp
(use-package org-caldav
  :after org
  :disabled t
  :config
  (setq org-caldav-url "http://neosloth.duckdns.org/baikal/html/dav.php")
  (setq org-caldav-calendar-id 1)
  (setq org-caldav-inbox "~/Sync/Notes/dav.org")
  (setq org-caldav-files '("~/Sync/Notes/appointments.org")))
#+END_SRC

*** Org-noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :disabled t
  :after org)
#+END_SRC
*** Ox-hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :disabled t
  :after ox)
#+END_SRC

*** Org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :disabled t
  :after org)
#+END_SRC
* ERC
#+BEGIN_SRC emacs-lisp
(use-package erc
  :commands irc-connect
  :bind ("C-c i" . irc-connect)
  :init

  (defun irc-connect ()
    "Connect to IRC interactively."
    (interactive)
    (let ((servers '("irc.freenode.net")))
      (mapc #'(lambda (server) (erc-tls :server server :port 6697)) servers)))

  :config
  (when
      (file-readable-p "~/.emacs.d/ercauth.el.gpg")
    (require 'erc-services)
    (erc-services-mode 1)
    (setq erc-prompt-for-nickserv-password nil)
    (load "~/.emacs.d/ercauth.el.gpg"))

  ;; Wait till identifying before joining channels
  (setq erc-autojoin-timing 'ident)
  (setq erc-prompt-for-password nil)
  ;; Switch current buffer whenever you are mentioned
  (setq erc-auto-query 'buffer)
  (setq erc-nick "neosloth")
  (setq erc-kill-buffer-on-part t)
  (setq erc-autojoin-channels-alist
        '((".*freenode.net" "#emacs")))

  (setq erc-interpret-mirc-color t)

  (setq erc-prompt ">")
  (erc-notifications-mode 1))
#+END_SRC

* Theme
** Zerodark
#+BEGIN_SRC emacs-lisp
(use-package zerodark-theme
  :config
  (load-theme 'zerodark t))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification " " mode-line-position
               " " mode-line-misc-info mode-line-end-spaces))
#+END_SRC
* Disabled :ARCHIVE:
** Gnus
#+BEGIN_SRC emacs-lisp :tangle no
(use-package gnus
  :commands gnus
  :disabled t
  :config

  ;; @see http://www.emacswiki.org/emacs/GnusGmail#toc1
  (setq gnus-select-method '(nntp "news.gmane.org")) ;; if you read news groups

  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (add-hook 'gnus-group-mode-hook
            ;; list all the subscribed groups even they contain zero un-read messages
            (lambda () (local-set-key "o" 'my-gnus-group-list-subscribed-groups )))

  ;; ask encryption password once
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  (setq gnus-thread-sort-functions
        '(gnus-thread-sort-by-most-recent-date
          (not gnus-thread-sort-by-number)))

  (setq gnus-thread-hide-subtree t)
  (setq user-mail-address "neosloth@disroot.org"
        user-full-name "Stefan Kuznetsov")

  (setq nnmail-expiry-wait 'immediate)

  (setq gnus-select-method
        '(nnimap "main"
                 (nnimap-address "imap.gmail.com")
                 (nnimap-server-port "imaps")
                 (nnimap-stream ssl)))

  (setq gnus-secondary-select-methods
        '(
          (nnimap "disroot"
                  (nnimap-address "disroot.org")
                  (nnimap-server-port "imaps")
                  (nnimap-server-port 993))
          (nnimap "official"
                  (nnimap-address "imap.gmail.com")
                  (nnimap-server-port "imaps")
                  (nnimap-stream ssl))
          (nnimap "hotmail"
                  (nnimap-address "outlook.office365.com")
                  (nnimap-server-port "imaps")
                  (nnimap-server-port 993))))

  (setq gnus-posting-styles
        '(((header "to" "superstepag@gmail.com")
           (address "superstepag@gmail.com"))
          ((header "to" "stepan.s.kuznetsov@gmail.com")
           (address "stepan.s.kuznetsov@gmail.com"))
          ((header "cc" "superstepag@gmail.com")
           (address "superstepag@gmail.com"))
          ((header "cc" "stepan.s.kuznetsov@gmail.com")
           (address "stepan.s.kuznetsov@gmail.com"))))

  ;;send mail config
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "disroot.org"
        smtpmail-smtp-service 587
        gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

  (defun my-message-mode-setup ()
    "Turn on auto fill when composing emails."
    (flyspell-mode t)
    (setq fill-column 72)
    (turn-on-auto-fill))

  (add-hook 'message-mode-hook 'my-message-mode-setup)

  (defun exit-gnus-on-exit ()
    (if (and (fboundp 'gnus-group-exit)
             (gnus-alive-p))
        (with-current-buffer (get-buffer "*Group*")
          (let (gnus-interactive-exit)
            (gnus-group-exit)))))

  (add-hook 'kill-emacs-hook 'exit-gnus-on-exit))
#+END_SRC
** rcirc
#+BEGIN_SRC emacs-lisp :tangle no
(use-package rcirc
  :commands irc
  :bind ("C-c i" . irc)
  :ensure rcirc-styles
  :disabled t
  :config
  (progn
    ;;ircauth contains nickserv passwords
    (when
        (file-readable-p "~/.emacs.d/.ircauth.el.gpg")
      (load "~/.emacs.d/.ircauth.el.gpg"))

    (add-hook 'rcirc-mode-hook (lambda ()
                                 (flyspell-mode 1)
                                 (visual-line-mode)
                                 ;; Scroll to bottom
                                 (set (make-local-variable 'scroll-conservatively) 8192)))

    (setq rcirc-default-nick "neosloth")
    (set-face-foreground 'rcirc-my-nick "yellow" nil)

    (setq rcirc-server-alist
          '(("irc.freenode.net" :port 6697 :encryption tls :channels ("#emacs"))
            ("irc.lainchan.org" :port 6697 :encryption tls :channels ("#lainchan" "#xonotic"))))

    (setq rcirc-fill-flag nil)))
#+END_SRC
** Feebleline
#+BEGIN_SRC emacs-lisp
(use-package feebleline
  :disabled t
  :config
  (setq feebleline-mode-line-text
        '(("%s"    ((if (buffer-file-name) (buffer-file-name)
                      (buffer-name))) (face feebleline-bufname-face))
          ("%s"       ((if (and (buffer-file-name) (buffer-modified-p)) "*" "" ))
           (face feebleline-asterisk-face))))
  (feebleline-mode))
#+END_SRC
