#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Garbage Collection
#+BEGIN_SRC emacs-lisp
(setq use-package-compute-statistics t)
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold 8000000)
;; Reset it to the default after initialization
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+END_SRC

** Automatic tangling
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  ;; Continue only if init.org is the current file
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (concat user-emacs-directory "init.el")
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** MELPA
#+BEGIN_SRC emacs-lisp
(unless (eq system-type 'windows-nt)
  (setq tlc-checktrust t))

(when (>= emacs-major-version 24)
  (require 'package)

  (add-to-list
   'package-archives
   '("org" . "http://orgmode.org/elpa/") t)
  
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/") t)

  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))

#+END_SRC

** Install use-package
Make sure that use-package is installed and that ensure is always on so that use-package downloads every package that is not installed.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
* Misc options
** Startup with tramp
#+BEGIN_SRC emacs-lisp
;;(require 'tramp)
(setq tramp-default-method "ssh"
      tramp-backup-directory-alist backup-directory-alist
      tramp-ssh-controlmaster-options "ssh")
#+END_SRC
** Custom Keybinds
#+BEGIN_SRC emacs-lisp
;;Replace the default switch buffer key with the smarter ibuffer window
(global-set-key (kbd "C-x C-b") 'ibuffer)

(global-set-key (kbd "C-c w") 'whitespace-mode)

(global-set-key (kbd "C-c c") 'quick-calc)

(global-set-key (kbd "C-c a") 'org-agenda-list)

(global-set-key (kbd "C-c o") 'org-capture)

(global-set-key (kbd "C-c v") 'visual-line-mode)

(global-set-key (kbd "<f8>") 'compile)
#+END_SRC
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar scroll bar and menubar
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))

(menu-bar-mode -1)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Keep the buffer up to date with disk changes
(global-auto-revert-mode 1)

;;Speeds up process reads
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC
*** Easily search for non ASCII Characters
#+BEGIN_SRC emacs-lisp
(setq search-default-mode #'char-fold-to-regexp)
(setq replace-char-fold t)
#+END_SRC
*** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
;; Causes lag on windows
(unless (eq system-type 'windows-nt)
  (global-prettify-symbols-mode)
  (setq prettify-symbols-unprettify-at-point 'right-edge))
#+END_SRC
** Open eshell in current window
Credit goes to [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfugwkt][/u/howardabrams]] and [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/cfuuo5y][/u/AndersBakken]]
#+BEGIN_SRC emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the current buffer's file."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (name (car (last (split-string parent "/" t)))))
    (split-window-vertically)
    (other-window 1)
    (eshell)
    (rename-buffer (concat "Eshell: " name))
    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-c s") 'eshell-here)

(defun eshell/x ()
  (kill-buffer-and-window))
#+END_SRC
** UTF-8 and Fonts
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :family "Consolas" :height 100)
  (set-face-attribute 'default nil :family "DejaVu Sans Mono"))

;;The following lines force UTF-8 whenever possible
(setq-default buffer-file-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
#+END_SRC
** Dos2Unix
#+BEGIN_SRC emacs-lisp
(defun dos2unix ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (set-buffer-file-coding-system 'unix))
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
;;Enables copy/paste from the system clipboard.
;;(setq select-enable-primary t)
;;(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
#+END_SRC
** Auto saves
Move the auto-save and backup files into the temp file directory so that emacs doesn't flood the working folders with junk.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))

#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(setq initial-scratch-message nil)

(defun display-startup-echo-area-message()
  (message (emacs-init-time)))

#+END_SRC
** Dired
*** Dired quick copy/paste
When dired-dwim-target is enabled, dired tries to guess a default target directory. So if there are multiple dired panes open it will use that as the default.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
*** Misc
Show all files with human readable sizes
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

** Fix lag
[[https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746][Source]]
#+BEGIN_SRC emacs-lisp
(setq auto-window-vscroll nil)
#+END_SRC
** Horizontal Scrolling
#+BEGIN_SRC emacs-lisp
(setq auto-hscroll-mode 'current-line)
#+END_SRC
** Rgrep fix
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (setq find-program (expand-file-name "~/Sync/PortableWindows/emacs/bin/find.exe")))
#+END_SRC
** Disable custom settings
Moves the custom file into a temp file, effectively making it session local

[[https://jamiecollinson.com/blog/my-emacs-config/][Source]]

#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
** Enable ANSI Colors in compilation mode
#+begin_src emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
* Custom Packages
** Vertico
#+begin_src emacs-lisp
(use-package selectrum
  :init
  (selectrum-mode)
  :config
  (defun selectrum-fido-backward-updir ()
    "Delete char before or go up directory, like `ido-mode'."
    (interactive)
    (if (and (eq (char-before) ?/)
             (eq (selectrum--get-meta 'category) 'file))
        (save-excursion
          (goto-char (1- (point)))
          (when (search-backward "/" (point-min) t)
            (delete-region (1+ (point)) (point-max))))
      (call-interactively 'backward-delete-char)))
  (define-key selectrum-minibuffer-map (kbd "DEL") 'selectrum-fido-backward-updir))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category defaults nil))

(use-package consult
  :bind
  (("\C-s" . consult-line)))
#+end_src
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (setq evil-want-keybinding nil)
  :diminish undo-tree-mode
  :ensure undo-tree
  :init
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  ;;Disable evil in these modes
  (evil-set-initial-state 'erc-mode 'emacs)
  (evil-set-initial-state 'message-mode 'emacs)
  (global-undo-tree-mode))

(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))

(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))

(use-package lispyville
  :hook ((lisp-mode . lispyville-mode)
         (emacs-lisp-mode . lispyville-mode))
  :config
  (lispyville-set-key-theme '(operators c-w additional slurp/barf-cp)))
#+END_SRC

*** Org-evil
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 10
  :diminish company-mode
  :init (global-company-mode t)
  :bind (:map company-active-map
              ("<tab>" . company-select-next)
              ("<backtab>" . company-select-previous)
              ("RET" . nil))
  :config
  (add-hook 'eshell-mode-hook #'(lambda () (company-mode -1)))
  (add-hook 'after-init-hook 'company-tng-mode)
  ;; no delay on autocomplete
  (setq
   company-idle-delay 0
   company-minimum-prefix-length 2
   company-tooltip-limit 20))
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure company-auctex
  :mode (("\\.tex$" . LaTeX-mode)
         ("\\.latex$" . LaTeX-mode))

  :config
  (setq TeX-PDF-mode t)
  (setq TeX-auto-save t)
  (add-hook 'latex-mode-hook 'turn-on-auto-fill)
  (add-hook 'latex-mode-hook 'visual-line-mode)
  (company-auctex-init))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status))
#+END_SRC
** Langtool
#+BEGIN_SRC emacs-lisp
(use-package langtool
  :commands langtool-check
  :custom (langtool-language-tool-jar "~/Sync/Misc/LanguageTool-4.3/languagetool-commandline.jar"))
#+END_SRC
** Get path from shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src
** Emojifi
#+begin_src emacs-lisp
(use-package emojify
  :if (memq window-system '(w32))
  :custom
  (emojify-emoji-style '(unicode))
  :hook (after-init . global-emojify-mode))
#+end_src
* Programming Modes
** Language Independent Settings
*** Parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC
*** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :commands ws-butler-mode
  :init (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp
(defun neosloth-prog-mode-hook ()
  "My custom prog mode hook"
  (setq electric-pair-inhibit-predicate
        (lambda (c)
          (if (char-equal c ?<) t (electric-pair-default-inhibit c))))
  (electric-pair-mode)
  (setq tab-width 4))

(add-hook 'prog-mode-hook 'neosloth-prog-mode-hook)
#+END_SRC

** LSP
Dependent on [[https://github.com/palantir/python-language-server][pyls]], [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-language-server]] and [[https://github.com/Microsoft/vscode/tree/master/extensions/html-language-features/server][html-language-server]]

*** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook ((js-mode . lsp-deferred)
		 (python-mode . lsp-deferred)
		 (ruby-mode . lsp-deferred)
		 (css-mode . lsp-deferred) 
		 (web-mode . lsp-deferred)
		 (html-mode . lsp-deferred)
		 (go-mode . lsp-deferred))
  :commands lsp
  :ensure treemacs
  :init
  (setq lsp-keymap-prefix "C-c l")
  (defun lsp-go-install-save-hooks ()
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  :custom
  (lsp-clients-typescript-server-args `("--stdio" "--tsserver-log-file" ,(expand-file-name (concat (temporary-file-directory) ".tslog"))))
  (lsp-modeline-code-actions-segments '(name count))
  (lsp-headerline-breadcrumb-mode-enable nil))

(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC

** Tree Sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :after tree-sitter)
#+end_src
** Json
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src
** Ruby
#+begin_src emacs-lisp
(use-package chruby
  :commands chruby-use-corresponding
  :hook ((ruby-mode . chruby-use-corresponding)))
#+end_src

** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

** Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
** Go
#+begin_src emacs-lisp
(use-package go-mode
  :config
  
  (defun project-find-go-module (dir)
	(when-let ((root (locate-dominating-file dir "go.mod")))
	  (cons 'go-module root)))

  (cl-defmethod project-root ((project (head go-module)))
	(cdr project))

  (add-hook 'project-find-functions #'project-find-go-module))
#+end_src
** Java
Add a custom compile command

#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook
          (lambda ()
            (set (make-local-variable 'compile-command)
                 (let ((file (file-name-nondirectory buffer-file-name)))
                   (format "javac %s" 
                           file)))))
#+END_SRC
** C-Mode
*** Indentation
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)

(defun cpp-compile-command ()
  (set (make-local-variable 'compile-command)
       (let ((file (file-name-nondirectory buffer-file-name)))
         (format "g++ -pedantic -Wall -Wextra %s"
                 file))))

(add-hook 'c-mode-common-hook 'cpp-compile-command)
#+END_SRC
** Javascript
*** Typescript
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist 
             '("\\.ts\\'" . js-mode))
#+end_src
** Web/HTML
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :commands emmet-mode
  :hook (js-mode html-mode sgml-mode mhtml-mode ts-mode web-mode)
  :config
  (setq emmet-move-cursor-between-quotes t))

(use-package web-mode
  :mode (("\\.component.ts\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.jsx\\'" . web-mode)
         ("\\.module.ts\\'" . web-mode)
         ("\\.component.html\\'" . web-mode)
         ("\\.vue\\'" . web-mode)
         ("\\.ejs\\'" . web-mode))
  :commands web-mode)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom (markdown-command "multimarkdown"))
#+END_SRC
** Sly
#+BEGIN_SRC emacs-lisp
(use-package sly
  :custom (inferior-lisp-program "ros -Q run"))
#+END_SRC

** Very Large files
#+begin_src emacs-lisp
(if (version<= "27.1" emacs-version)
    (global-so-long-mode 1))
#+end_src
** Restclient
#+begin_src emacs-lisp
(use-package restclient
  :ensure ob-restclient
  :after org
  :commands (restclient-mode)
  :mode (("\\.rest$" . restclient-mode))
  :init (add-to-list 'org-babel-load-languages '(restclient . t)))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode))
#+end_src
* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org" . org-mode)
  :diminish (org-indent-mode visual-line-mode flyspell-mode)
  :ensure org-superstar
  :ensure htmlize
  :config
  (progn
    (setq org-src-preserve-indentation nil

          org-confirm-babel-evaluate nil
          org-return-follows-link t
          org-startup-with-inline-images t
          org-descriptive-links nil      
          ;; Automatically preview latex fragments, and store the image files in the temp directory
          ;; org-startup-with-latex-preview t
          org-latex-preview-ltxpng-directory (expand-file-name
                                              (concat temporary-file-directory "ltxpng/"))
          ;; org-latex-create-formula-image-program 'imagemagick
          ;; allows alphabetical lists
          org-list-allow-alphabetical t
          ;; requires superscripts to use groups ({})
          org-use-sub-superscripts nil
          org-export-with-toc nil
          org-notes-location "~/Sync/Notes/"
          org-todo-location (expand-file-name
                             (concat org-notes-location "agenda.org"))
          org-default-notes-file org-todo-location
          org-agenda-include-diary t
          org-agenda-files (list org-todo-location))

    ;; org-src config
    (setq
     org-edit-src-content-indentation 0
     org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-src-window-setup 'current-window)

    ;; Make windmove work in org-mode:
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right)



    ;; Org-publish config
    (setq org-html-validation-link nil)

    (add-hook 'org-mode-hook 'flyspell-mode)

    ;; org-icalendar config
    (setq org-icalendar-combined-agenda-file "~/Sync/Notes/agenda.ics")
    (setq org-icalendar-include-todo t)
    (setq org-icalendar-use-scheduled '(event-if-todo event-if-not-todo))
    (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo))


    (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'visual-line-mode))

  (require 'ox-md)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (java . t)
     (calc . t)
     (lisp . t)
     (shell . t)
     (ruby . t)
     (js . t)
     (C . t)
     (scheme . t)))
#+END_SRC
** Org Publish
This is still inside the org use-package
#+BEGIN_SRC emacs-lisp
(defun neo-postamble (plist)
  (format
   "<a id=\"sticky_arrow\" href=\"#top\">Top</a>
  <footer>
    <p>This site was generated using <a href=\"https://orgmode.org/\">org mode</a> on <em>%s</em></p>
  </footer>" (current-time-string)))

;; Lazy and bad
(defun neo-org-publish ()
  (interactive)
  (let ((default-directory
          (plist-get (cdar org-publish-project-alist) :publishing-directory))
        (commit-msg (current-time-string)))
    (org-publish-all)
    (shell-command (format "git commit -am \"%s\" && git push origin master" commit-msg))))

(setq neo-site-head-extra "<link rel='stylesheet' type='text/css' href='../css/style.css' />")

;; Custom blog sitemap
;; Taken from https://www.evenchick.com/blog/blogging-with-org-mode.html
(defun neo-site-format-entry (entry style project)
  (format "[[file:%s][%s]] --- %s"
          entry
          (org-publish-find-title entry project)
          (format-time-string "%Y-%m-%d" (org-publish-find-date entry project))))

(setq org-publish-project-alist
      `(("org-content"
         :author "neosloth"
         ;; Location of org files
         :base-directory "~/Sync/Notes/website/content/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/"
         :auto-sitemap nil
         :html-postamble neo-postamble
         :html-html5-fancy t
         :htmlized-source t
         :recursive t
         :publishing-function org-html-publish-to-html)

        ("org-blog"
         :author "neosloth"
         ;; Location of org files
         :base-directory "~/Sync/Notes/website/blog/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/blog/"
         :html-postamble neo-postamble
         :html-html5-fancy t
         ;; Content has css links in the template
         :html-head-extra ,neo-site-head-extra
         :htmlized-source t
         :auto-sitemap t
         :sitemap-filename "index.org"
         :sitemap-title "Articles"
         :sitemap-style list
         :sitemap-sort-files anti-chronologically
         :sitemap-format-entry neo-site-format-entry
         :html-link-up "./index.html"
         :html-link-home "../index.html"
         :recursive t
         :publishing-function org-html-publish-to-html)

        ("org-static"
         :base-directory "~/Sync/Notes/website/static/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|dec\\|m4a\\|ico\\|html\\|txt"
         :publishing-directory "~/Sync/publish/"
         :recursive t
         :publishing-function org-publish-attachment)
        
        ("org-src-content"
         :base-directory "~/Sync/Notes/website/content/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/src/content/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-src-blog"
         :base-directory "~/Sync/Notes/website/blog/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/src/blog/"
         :recursive t
         :publishing-function org-publish-attachment)
        
        ("website" :components ("org-content" "org-static" "org-blog" "org-src-content" "org-src-blog")))))
#+END_SRC
** Org Capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :custom
  (org-capture-templates
   '(("t" "Todo" entry (file+headline org-todo-location "Tasks")
      "* TODO %?\n  %i\n  %a")
     ("p" "Clipboard" entry (file+headline org-todo-location "Links")
      "* %?\n %x")
     ("c" "Contact" entry (file+headline "~/Sync/Notes/contacts.org" "Contacts"),
      my/org-contacts-template
      :empty-lines 1 )
     ("s" "Scheduled" entry (file+headline org-todo-location "Events")
      "* %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"))))
#+END_SRC
#+begin_src emacs-lisp
(use-package company-org-block
  :after org
  :custom
  (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src

** Export Backends
*** ox-slack
#+begin_src emacs-lisp
(use-package ox-slack
  :after org)
#+end_src
* Theme
** Modeline
#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position evil-mode-line-tag
                (vc-mode vc-mode)
                "  " mode-line-misc-info mode-line-end-spaces))
#+END_SRC

** Zerodark
#+BEGIN_SRC emacs-lisp
(use-package zerodark-theme
  :config
  (load-theme 'zerodark t))
#+END_SRC

