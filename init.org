#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes
* Package Initialization and Installation
** Garbage Collection
#+BEGIN_SRC emacs-lisp
;;(setq use-package-compute-statistics t)
;; Allocate more memory to the garbage collector during initialization.
(setq gc-cons-threshold (* 50 1000 1000))
;; Portion of heap used for allocation.  Defaults to 0.1.
(setq gc-cons-percentage 0.6)
;; Reset it to the default after initialization
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 2 1000 1000))))
#+END_SRC

** Automatic tangling
Taken from [[https://github.com/larstvei/dot-emacs/][larstvei]]
#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  (interactive)
  ;; Continue only if init.org is the current file
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (concat user-emacs-directory "init.el")
      (load-file (expand-file-name (concat user-emacs-directory "init.el"))))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC
** MELPA
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (add-to-list
   'package-archives
   '("org" . "http://orgmode.org/elpa/") t)

  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/") t))
#+END_SRC

** Install use-package
Make sure that use-package is installed and that ensure is always on so that use-package downloads every package that is not installed.
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC
** Install quelpa
#+begin_src emacs-lisp
(use-package quelpa-use-package
  :disabled t)
#+end_src
* Misc options
** Startup with tramp
#+BEGIN_SRC emacs-lisp
;;(require 'tramp)
(setq tramp-default-method "ssh"
      tramp-backup-directory-alist backup-directory-alist
      tramp-ssh-controlmaster-options "ssh")
#+END_SRC
** Custom Keybinds
#+BEGIN_SRC emacs-lisp
;;Replace the default switch buffer key with the smarter ibuffer window
(global-set-key (kbd "C-x C-b") 'ibuffer)



(global-set-key (kbd "C-c w") 'whitespace-mode)

(global-set-key (kbd "C-c c") 'quick-calc)

(global-set-key (kbd "C-c a") 'org-agenda-list)

(global-set-key (kbd "C-c o") 'org-capture)

(global-set-key (kbd "C-c v") 'visual-line-mode)

(global-set-key (kbd "<f8>") 'compile)

(setq tab-always-indent 'complete)
#+END_SRC
** Random Quality of Life Things
#+BEGIN_SRC emacs-lisp
;;Show current buffer name
(setq frame-title-format "emacs - %b")
;;Hide the toolbar scroll bar and menubar
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))

(menu-bar-mode -1)

;; Always treat tabs as spaces
(setq-default indent-tabs-mode nil)

;;Truncate lines instead of word wrapping them
(setq-default truncate-lines t)
;; Use y or n instead of yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable the visual bell and the audio bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Keep the buffer up to date with disk changes
(global-auto-revert-mode 1)

;;Speeds up process reads
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(add-hook 'prog-mode-hook 'subword-mode)

(use-package whitespace
  :ensure nil
  :bind ("C-c w" . whitespace-mode)
  :hook ((prog-mode . whitespace-mode))
  :config
  (setq whitespace-style '(face tabs spaces trailing space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark missing-newline-at-eof)))
#+END_SRC
*** Easily search for non ASCII Characters
#+BEGIN_SRC emacs-lisp
(setq search-default-mode #'char-fold-to-regexp)
(setq replace-char-fold t)
#+END_SRC
*** Prettify symbols mode
#+BEGIN_SRC emacs-lisp
;; Causes lag on windows
(unless (eq system-type 'windows-nt)
  (global-prettify-symbols-mode)
  (setq prettify-symbols-unprettify-at-point 'right-edge))
#+END_SRC
** UTF-8 and Fonts
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
        (set-face-attribute 'default nil :family "Consolas" :height 100)
  (set-face-attribute 'default nil :family "DejaVu Sans Mono"))

(set-fontset-font t 'symbol "Apple Color Emoji")
(set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
(set-fontset-font t 'symbol "Segoe UI Emoji" nil 'append)
(set-fontset-font t 'symbol "Symbola" nil 'append)

;;The following lines force UTF-8 whenever possible
(setq-default buffer-file-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
#+END_SRC
** Dos2Unix
#+BEGIN_SRC emacs-lisp
(defun dos2unix (buffer)
  "Automate M-% C-q C-m RET C-q C-j RET"
  (interactive "*b")
  (save-excursion
    (goto-char (point-min))
    (while (search-forward (string ?\C-m) nil t)
      (replace-match (string ?\C-j) nil t))))
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
;;Enables copy/paste from the system clipboard.
;;(setq select-enable-primary t)
;;(setq select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
(setq kill-do-not-save-duplicates t)
#+END_SRC
** Auto saves
Move the auto-save and backup files into the temp file directory so that emacs doesn't flood the working folders with junk.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
)

(setq auto-save-file-name-transforms
      `((".*" , temporary-file-directory t)))
#+END_SRC
** Startup Message and Screen
#+BEGIN_SRC emacs-lisp
;;Disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t)

(setq initial-scratch-message nil)

(defun display-startup-echo-area-message()
  (message (emacs-init-time)))
#+END_SRC
** Dired
*** Dired quick copy/paste
When dired-dwim-target is enabled, dired tries to guess a default target directory. So if there are multiple dired panes open it will use that as the default.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
*** Misc
Show all files with human readable sizes
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

** Fix lag
[[https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746][Source]]
#+BEGIN_SRC emacs-lisp
(setq auto-window-vscroll nil)
#+END_SRC
** Horizontal Scrolling
#+BEGIN_SRC emacs-lisp
(setq auto-hscroll-mode 'current-line)
#+END_SRC
** Rgrep fix
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (setq find-program (expand-file-name "~/Sync/PortableWindows/emacs/bin/find.exe")))
#+END_SRC
** Disable custom settings
Moves the custom file into a temp file, effectively making it session local

[[https://jamiecollinson.com/blog/my-emacs-config/][Source]]

#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
** Enable ANSI Colors in compilation mode
#+begin_src emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
* Custom Packages
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode 1)
  (vertico-multiform-mode 1)
  :config
  (setq vertico-multiform-commands
    '((consult-line buffer)
      (consult-line-thing-at-point buffer)
      (consult-recent-file buffer)
      (consult-mode-command buffer)
      (consult-complex-command buffer)
      (embark-bindings buffer)
      (consult-locate buffer)
      (consult-project-buffer buffer)
      (consult-ripgrep buffer)
      (consult-fd buffer)))
  :bind (:map vertico-map
          ("M-<return>" . minibuffer-force-complete-and-exit)))

;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package marginalia
  :init
  (marginalia-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category defaults nil))

(use-package consult
  :bind
  (("\C-s" . consult-line)))
#+end_src
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (setq evil-want-keybinding nil)
  :diminish undo-tree-mode
  :ensure undo-tree
  :init
  (setq undo-tree-auto-save-history nil)
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  ;;Disable evil in these modes
  (evil-set-initial-state 'erc-mode 'emacs)
  (evil-set-initial-state 'message-mode 'emacs)
  (evil-set-initial-state 'sqlite-mode 'emacs)
  (global-undo-tree-mode))

(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config (evil-collection-init))

(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode))

(use-package lispyville
  :hook ((lisp-mode . lispyville-mode)
         (emacs-lisp-mode . lispyville-mode)
         (clojure-mode . lispyville-mode))
  :config
  (lispyville-set-key-theme '(operators c-w additional slurp/barf-cp)))
#+END_SRC

*** Org-evil
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package corfu
  ;; TAB-and-Go customizations
  :custom
  (corfu-auto t)
  (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect-first nil) ;; Disable candidate preselection

  ;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (global-corfu-mode))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :mode (("\\.tex$" . LaTeX-mode)
         ("\\.latex$" . LaTeX-mode))

  :config
  (setq TeX-PDF-mode t)
  (setq TeX-auto-save t)
  (add-hook 'latex-mode-hook 'turn-on-auto-fill)
  (add-hook 'latex-mode-hook 'visual-line-mode))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status))
#+END_SRC
** Get path from shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src
** Flymake
#+begin_src emacs-lisp
(use-package flymake
  :ensure nil
  :config
  (define-key evil-normal-state-map (kbd "C-j") 'flymake-goto-next-error)
  (define-key evil-normal-state-map (kbd "C-k") 'flymake-goto-prev-error))
#+end_src
** Kubed
#+begin_src emacs-lisp
(use-package kubed
  :bind (("C-c k" . kubed-prefix-map)
         :map kubed-prefix-map
         ("k" . kubed-transient)))
#+end_src
* Programming Modes
** Language Independent Settings
*** Parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0)
(setq show-paren-style 'expression)
#+END_SRC
*** Whitespace
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :commands ws-butler-mode
  :init (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC
*** git-gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :commands git-gutter-mode
  :hook (prog-mode . git-gutter-mode))
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp
(defun neosloth-prog-mode-hook ()
  "My custom prog mode hook"
  (setq electric-pair-inhibit-predicate
        (lambda (c)
          (if (char-equal c ?<) t (electric-pair-default-inhibit c))))
  (electric-pair-mode))

(add-hook 'prog-mode-hook 'neosloth-prog-mode-hook)
#+END_SRC

** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :hook ((js-mode . eglot-ensure)
                 (python-mode . eglot-ensure)
                 (html-mode . eglot-ensure)
                 (css-mode . eglot-ensure)
                 (scala-mode . eglot-ensure))
  :init
  (add-hook 'before-save-hook #'eglot-format-buffer)
  :config
  ;; enable corfu
  (setq completion-category-defaults nil)
  (add-to-list 'eglot-server-programs '(mhtml-mode . ("html-languageserver" "--stdio")))
  (add-to-list 'eglot-server-programs '(css-mode . ("css-languageserver" "--stdio"))))
#+end_src
** Fsharp
#+begin_src emacs-lisp
(use-package fsharp-mode
  :disabled t)
#+end_src
** Python
#+begin_src emacs-lisp
(use-package python-mode
  :mode ("\\.py\\'" . python-mode)
  :ensure t)

(use-package pyvenv-auto
  :hook ((python-mode . pyvenv-auto-run)))
#+end_src

** Scala
#+begin_src emacs-lisp
(use-package scala-mode
  :disabled t
  :interpreter ("scala" . scala-mode))

;; Enable sbt mode for executing sbt commands
(use-package sbt-mode
  :disabled t
  :commands sbt-start sbt-command
  :config
  ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
  (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src
** Tree Sitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure nil
  :config
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))


(use-package treesit-auto
  :config
  (setq treesit-auto-install 'prompt)
  (global-treesit-auto-mode))

(use-package tree-sitter-indent
  :after tree-sitter)
#+end_src
** Ruby
#+begin_src emacs-lisp
  (use-package ruby-ts-mode
    :mode "\\.rb\\'"
    :mode "Rakefile\\'"
    :mode "Gemfile\\'")

(use-package chruby
  :commands chruby-use-corresponding
  :hook ((ruby-mode . chruby-use-corresponding)))

(use-package inf-ruby
  :after ruby)
#+end_src

** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

** Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
** Go
#+begin_src emacs-lisp
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :config
  (defun project-find-go-module (dir)
        (when-let ((root (locate-dominating-file dir "go.mod")))
          (cons 'go-module root)))

  (cl-defmethod project-root ((project (head go-module)))
        (cdr project))

  (add-hook 'project-find-functions #'project-find-go-module))
#+end_src
** C-Mode
*** Indentation
#+BEGIN_SRC emacs-lisp
;;Indent c++ code with 4 spaces
(defun indent-c-mode-hook ()
  (setq c-basic-offset 4
        c-indent-level 4
        c-default-style "linux"))
(add-hook 'c-mode-common-hook 'indent-c-mode-hook)
#+END_SRC
** Javascript
*** Typescript
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.ts\\'" . js-mode))
#+end_src
** Web/HTML
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :commands emmet-mode
  :hook (js-mode html-mode sgml-mode mhtml-mode ts-mode web-mode)
  :config
  (setq emmet-move-cursor-between-quotes t))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom (markdown-command "multimarkdown"))
#+END_SRC
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :disabled t
  :hook (haskell-mode . haskell-indentation-mode)
  :hook (haskell-mode . haskell-doc-mode)
  :bind (:map haskell-mode-map
                          ("C-c C-l" . haskell-process-load-or-reload)
                          ("C-c C-t" . haskell-process-do-type)
                          ("C-c C-i" . haskell-process-do-info)))
#+end_src
** Sly
#+BEGIN_SRC emacs-lisp
(use-package sly
  :mode (("\\.lisp\\'" . sly-mode))
  :init
  (with-eval-after-load 'sly-mrepl
    (define-key sly-mrepl-mode-map (kbd "<C-up>") 'sly-mrepl-previous-input-or-button)
    (define-key sly-mrepl-mode-map (kbd "<C-down>") 'sly-mrepl-next-input-or-button))

  :config
    (setq sly-lisp-implementations
          '((qlot ("qlot" "exec" "sbcl") :coding-system utf-8-unix))))
#+END_SRC

** Cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :disabled t)
#+END_SRC
** Very Large files
#+begin_src emacs-lisp
(if (version<= "27.1" emacs-version)
    (global-so-long-mode 1))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src
** Direnv
#+begin_src emacs-lisp
(unless (eq system-type 'windows-nt)
  (use-package envrc
    :config
    (envrc-global-mode)))
#+end_src
** Gleam
#+begin_src emacs-lisp
(use-package gleam-mode
  :disabled t
  :quelpa (gleam-mode :fetcher github :repo "gleam-lang/gleam-mode"))
#+end_src
** Ansible
#+begin_src emacs-lisp
(use-package ansible
  :disabled t)
#+end_src
* Org Mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org" . org-mode)
  :diminish (org-indent-mode visual-line-mode)
  :ensure org-superstar
  :ensure htmlize
  :defer t
  :config
  (progn
    (setq org-src-preserve-indentation nil

          org-confirm-babel-evaluate nil
          org-return-follows-link t
          org-startup-with-inline-images t
          org-descriptive-links nil
          ;; Automatically preview latex fragments, and store the image files in the temp directory
          ;; org-startup-with-latex-preview t
          org-latex-preview-ltxpng-directory (expand-file-name
                                              (concat temporary-file-directory "ltxpng/"))
          ;; org-latex-create-formula-image-program 'imagemagick
          ;; allows alphabetical lists
          org-list-allow-alphabetical t
          ;; requires superscripts to use groups ({})
          org-use-sub-superscripts nil
          org-export-with-toc nil)

    ;; org-src config
    (setq
     org-edit-src-content-indentation 0
     org-src-fontify-natively t
     org-src-tab-acts-natively t
     org-src-window-setup 'current-window)

    ;; Make windmove work in org-mode:
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right)

    ;; Org-publish config
    (setq org-html-validation-link nil)
    (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook 'org-superstar-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'visual-line-mode))

  (require 'ox-md)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (java . t)
     (haskell . t)
     (calc . t)
     (lisp . t)
     (shell . t)
     (ruby . t)
     (js . t)
     (C . t)
     (scheme . t)))
#+END_SRC
** Org Capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("j" "Journal" entry (file+datetree "~/Sync/Notes/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src
** Org Publish
This is still inside the org use-package
#+BEGIN_SRC emacs-lisp
(defun neo-postamble (plist)
  (format
   "<a id=\"sticky_arrow\" href=\"#top\">Top</a>
  <footer>
    <p>This site was generated using <a href=\"https://orgmode.org/\">org mode</a> on <em>%s</em></p>
  </footer>" (current-time-string)))

(setq neo-site-head-extra "<link rel='stylesheet' type='text/css' href='../css/style.css' />")

;; Custom blog sitemap
;; Taken from https://www.evenchick.com/blog/blogging-with-org-mode.html
(defun neo-site-format-entry (entry style project)
  (format "[[file:%s][%s]] --- %s"
          entry
          (org-publish-find-title entry project)
          (format-time-string "%Y-%m-%d" (org-publish-find-date entry project))))

(setq org-publish-project-alist
      `(("org-content"
         :author "neosloth"
         ;; Location of org files
         :base-directory "~/Sync/Notes/website/content/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/"
         :auto-sitemap nil
         :html-postamble neo-postamble
         :html-html5-fancy t
         :htmlized-source t
         :recursive t
         :publishing-function org-html-publish-to-html)

        ("org-static"
         :base-directory "~/Sync/Notes/website/static/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|dec\\|m4a\\|ico\\|html\\|txt"
         :publishing-directory "~/Sync/publish/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-src-content"
         :base-directory "~/Sync/Notes/website/content/"
         :base-extension "org"
         :publishing-directory "~/Sync/publish/src/content/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-roam"
         :auto-sitemap t
         :base-directory "~/Sync/Notes/roam"
         :base-extension "org"
         :publishing-directory "~/Sync/publish-roam"
         :recursive t
         :publishing-function org-html-publish-to-html)

        ("website" :components ("org-content" "org-static" "org-blog" "org-src-content")))))
#+END_SRC


** Org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Sync/Notes/roam"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :custom
  (org-roam-capture-templates '(("d" "default" plain "%?" :target (file+head "${slug}.org" "#+title: ${title}")
                               :unnarrowed t))
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-dailies)
  (require 'org-roam-export)))
#+end_src
** Export Backends
*** ox-slack
#+begin_src emacs-lisp
(use-package ox-slack
  :after org)
#+end_src
* Theme
** Modeline
#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position evil-mode-line-tag
                (vc-mode vc-mode)
                "  " mode-line-misc-info mode-line-end-spaces))
#+END_SRC

** Zerodark
#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :config
  (load-theme 'modus-vivendi-tinted t))
#+END_SRC
